---
- name: Generate RHDE ISO
  hosts: osbuild_nodes
  tags: create_rhde_iso
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: Start the rhde-microshift container
      containers.podman.podman_container:
        name: "{{ blueprint_name }}"
        state: started

    - name: Create target directory structure
      file:
        path: "{{ gen_iso_path }}/generate_iso/ostree"
        state: directory
        mode: 0755

    - name: Extract repo directory from container
      shell: podman cp {{ blueprint_name }}:/usr/share/nginx/html/repo {{ gen_iso_path }}/generate_iso/ostree

    - name: Template out isolinux.cfg config file
      template:
        src: templates/isolinux.cfg.j2
        dest: "{{ gen_iso_path }}/generate_iso/isolinux.cfg"
        mode: 0644
 
    - name: Template out grub.cfg config file
      template:
        src: templates/grub.cfg.j2
        dest: "{{ gen_iso_path }}/generate_iso/grub.cfg"
        mode: 0644

    - name: Template out ks.cfg kickstart file
      template:
        src: templates/ks.cfg.j2
        dest: "{{ gen_iso_path }}/generate_iso/ks.cfg"
        mode: 0644
    
    - name: Get the Access Token
      ansible.builtin.uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        body:
          grant_type: refresh_token
          client_id: rhsm-api
          refresh_token: "{{ api_token }}"
      register: access_token_payload

    - name: Get the RHEL Boot ISO file
      ansible.builtin.get_url:
        url: "https://api.access.redhat.com/management/v1/images/{{ rhel_boot_checksum }}/download"
        dest: "{{ gen_iso_path }}/{{ rhel_boot_iso_filename }}"
        headers:
          Authorization: "Bearer {{ access_token_payload.json.access_token }}"
      register: rhel_boot_download_url

    - name: Create the temporary boot iso folder
      file:
        path: "{{ tmp_boot_iso_path }}"
        state: directory
        mode: 0755

    - name: Mount the boot iso file
      ansible.posix.mount:
        path: "{{ tmp_boot_iso_path }}"
        src: "{{ gen_iso_path }}/{{ rhel_boot_iso_filename }}"
        opts: ro
        state: mounted
        fstype: iso9660

    - name: Create the final iso folder
      file:
        path: "{{ new_iso_path }}"
        state: directory
        mode: 0755

    - name: Copy the contents of the boot ISO to final directory
      ansible.builtin.copy:
        src: "{{ tmp_boot_iso_path }}/"
        dest: "{{ new_iso_path }}/"
        remote_src: yes

    - name: Unmount the boot iso file
      ansible.posix.mount:
        path: "{{ tmp_boot_iso_path }}"
        src: "{{ gen_iso_path }}/{{ rhel_boot_iso_filename }}"
        state: unmounted

    - name: Copy custom files to the new ISO directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ new_iso_path }}/"
        remote_src: yes
      loop:
        - "{{ gen_iso_path }}/generate_iso/isolinux.cfg"
        - "{{ gen_iso_path }}/generate_iso/grub.cfg"
        - "{{ gen_iso_path }}/generate_iso/ks.cfg"
        - "{{ gen_iso_path }}/generate_iso/ostree"

    - name: Generate final ISO file
      shell: >
        mkisofs -o /tmp/rhde-ztp.iso 
        -b isolinux/isolinux.bin -J -R -l 
        -c isolinux/boot.cat 
        -no-emul-boot 
        -boot-load-size 4 
        -boot-info-table 
        -eltorito-alt-boot 
        -e images/efiboot.img 
        -no-emul-boot 
        -graft-points 
        -joliet-long 
        -V "RHEL-8-7-0-BaseOS-x86_64" 
        {{ new_iso_path }}

    - name: Post process ISO file
      shell: isohybrid --uefi /tmp/rhde-ztp.iso

    - name: Implant MD5 checksum in the ISO image
      shell: implantisomd5 /tmp/rhde-ztp.iso
